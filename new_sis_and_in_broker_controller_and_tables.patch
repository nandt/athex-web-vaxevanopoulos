Subject: [PATCH] new sis and in broker controller and tables
---
Index: web/modules/custom/athex_d_mde/src/Service/IndicesOverviewTablesService.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/web/modules/custom/athex_d_mde/src/Service/IndicesOverviewTablesService.php b/web/modules/custom/athex_d_mde/src/Service/IndicesOverviewTablesService.php
--- a/web/modules/custom/athex_d_mde/src/Service/IndicesOverviewTablesService.php	(revision 23dbde305ace6b4725ac802ef375c1bd81323e4d)
+++ b/web/modules/custom/athex_d_mde/src/Service/IndicesOverviewTablesService.php	(date 1706710517816)
@@ -8,12 +8,20 @@
 use Drupal\athex_d_mde\AthexRendering\ProductsTable;
 use Drupal\athex_inbroker\Service\ApiDataService;
 use Drupal\athex_d_mde\AthexRendering\Helpers;
+use Drupal\athex_sis\Service\SisDbDataService;
 
 
 class IndicesOverviewTablesService {
 
 	use StringTranslationTrait;
 
+
+	/**
+	 * The SisDbDataService service.
+	 */
+	protected $sisDbDataService;
+
+
 	protected $api;
 	protected $containers;
 
@@ -25,13 +33,15 @@
 
 	public function __construct(
 		ApiDataService $api,
+		SisDbDataService $sisDbDataService, // Add SisDbDataService
 		IndicesOverviewService $containers
 	) {
 		$this->api = $api;
+		$this->sisDbDataService = $sisDbDataService; // correct property assignment
 		$this->containers = $containers;
-  	}
+	}
 
-	private function getSubProductsTableRA($seldSymbol, $seldTable) {
+	/*private function getSubProductsTableRA($seldSymbol, $seldTable) {
 		//TODO: get data from API
 		return (new ProductsTable([
 			['ATG 10010', 'Lorem ipsum dolor sit amet', 7402.14, Helpers::renderDelta(-97.39), Helpers::renderDelta(-1.3, ' %')],
@@ -44,6 +54,115 @@
 			['ATG 10010', 'Lorem ipsum dolor sit amet', 7402.14, Helpers::renderDelta(-97.39), Helpers::renderDelta(-1.3, ' %')]
 		]))->render();
 	}
+*/
+
+	/*private function getSubProductsTableRA($seldSymbol, $seldTable) {
+		$sql = "SELECT hs.TICKER_EN FROM HELEX_STOCKS hs
+            JOIN HELEX_INDEXCOMPOSITION hic ON hs.STOCK_ID = hic.STOCK_ID
+            JOIN HELEX_INDICES hi ON hic.INDEX_ID = hi.INDEX_ID
+            WHERE hi.TICKER_EN = :gdValue";
+
+		$data = $this->sisDbDataService->fetchAllWithParams($sql, [':gdValue' => $seldSymbol]);
+
+		$tableRows = [];
+		foreach ($data as $rowData) {
+			$column1 = $rowData["column1"];
+			$column2 = $rowData["column2"];
+			$tableRows[] = [$column1, $column2, Helpers::renderDelta($column1), Helpers::renderDelta($column2, ' %')];
+		}
+
+		return (new ProductsTable($tableRows))->render();
+	}
+*/
+
+
+	/*private function getSubProductsTableRA($seldSymbol, $seldTable) {
+		$sql = "SELECT hs.TICKER_EN FROM HELEX_STOCKS hs
+            JOIN HELEX_INDEXCOMPOSITION hic ON hs.STOCK_ID = hic.STOCK_ID
+            JOIN HELEX_INDICES hi ON hic.INDEX_ID = hi.INDEX_ID
+            WHERE hi.TICKER_EN = :gdValue";
+
+		$data = $this->sisDbDataService->fetchAllWithParams($sql, [':gdValue' => $seldSymbol]);
+
+		$tableRows = [];
+		foreach ($data as $rowData) {
+			$ticker_en = $rowData['TICKER_EN'];
+			$apiData = $this->api->callDelayed('Info', ['code' => $ticker_en, 'format' => 'json']);
+			var_dump($data);
+			//$apiData = $this->api->getApiDataByTicker($ticker_en); // This is hypothetical, replace it with your actual API call method
+			$column2 = $apiData["price"]; // Replace "column2" with the actual key in the API response
+			$column3 = $apiData["column3"]; // Replace "column3" with the actual key in the API response
+			$tableRows[] = [$ticker_en, $column2, Helpers::renderDelta($column2), Helpers::renderDelta($column3, ' %')];
+		}
+
+		return (new ProductsTable($tableRows))->render();
+	}
+*/
+
+	private function getSubProductsTableRA($seldSymbol, $seldTable) {
+		$sql = "SELECT hs.TICKER_EN FROM HELEX_STOCKS hs
+            JOIN HELEX_INDEXCOMPOSITION hic ON hs.STOCK_ID = hic.STOCK_ID
+            JOIN HELEX_INDICES hi ON hic.INDEX_ID = hi.INDEX_ID
+            WHERE hi.TICKER_EN = :gdValue";
+
+
+		$apiData = $this->api->callDelayed('Info', ['code' => $codes, 'format' => 'json']);
+		$data = $this->sisDbDataService->fetchAllWithParams($sql, [':gdValue' => $seldSymbol]);
+		var_dump($data);
+		$tableRows = [];
+		foreach ($data as $rowData) {
+			$ticker_en = $rowData['TICKER_EN'];
+			$apiData = $this->api->callDelayed('Info', ['code' => $codes, 'format' => 'json']);
+			//$items = $this->api->callDelayed('Info', ['code' => $codes]);
+			//var_dump($items);
+			if (isset($apiData[0])) {
+				$apiData = $apiData[0]; // Assuming the API returns an array of results, we take the first one
+				$price = $apiData['price'] ?? 'Data not available';
+				$change = $apiData['pricePrevClosePriceDelta'] ?? 'Data not available';
+
+				// Construct a row for the table
+				$tableRows[] = [
+					$ticker_en, // Ticker symbol
+					$price, // Price from the API
+					$change, // Price change from the API
+					// Additional columns as needed...
+				];
+			} else {
+				// Handle the case where API response is not as expected
+				$tableRows[] = [$ticker_en, 'API data not available', 'API data not available'];
+			}
+		}
+
+		return (new ProductsTable($tableRows))->render();
+	}
+
+
+
+
+	/*public function getBlockRA($seldTable = null) {
+		$symbols = ['GD', 'TPEIR', 'EXAE'];
+		foreach ($symbols as $seldSymbol) {
+			$container = $this->containers->createContainer();
+			$selectedSymbol = $container->selectedData['symbol'];
+			$containers[] = $container->render(
+				$this->getSubProductsRA($selectedSymbol, $seldTable)
+			);
+		}
+		return $containers;
+	}
+
+*/
+	public function getBlockRA($seldTable = null) {
+		$symbols = ['GD', 'FTSE', 'ETE', 'ALPHA', 'TPEIR', 'EXAE'];
+		foreach ($symbols as $seldSymbol) {
+			$container = $this->containers->createContainer();
+			$selectedSymbol = $seldSymbol; //using the initial symbol
+			$containers[] = $container->render(
+				$this->getSubProductsRA($selectedSymbol, $seldTable)
+			);
+		}
+		return $containers;
+	}
 
 	private function getSubProductsPillsRA($seldTable) {
 		return (new BsNav($this->pills, $seldTable, 'pills'))->render();
@@ -65,20 +184,13 @@
 		];
 	}
 
-	public function getBlockRA($seldTable = null) {
-		$container = $this->containers->createContainer();
-		$firstSymbolData = $container->selectedData[0] ?? null;
+    /*public function getBlockRA($seldTable = null)
+    {
+        $container = $this->containers->createContainer();
+        $selectedSymbol = $container->selectedData['symbol'];
 
-		if ($firstSymbolData) {
-			return $container->render(
-				$this->getSubProductsRA(
-					$firstSymbolData['symbol'],
-					$seldTable
-				)
-			);
-		} else {
-			// Handle the case where there is no data
-			return ['#markup' => 'No data available.'];
-		}
-	}
+        return $container->render(
+            $this->getSubProductsRA($selectedSymbol, $seldTable)
+        );
+    }*/
 }
Index: web/modules/custom/athex_sis/src/Service/SisDbDataService.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/web/modules/custom/athex_sis/src/Service/SisDbDataService.php b/web/modules/custom/athex_sis/src/Service/SisDbDataService.php
--- a/web/modules/custom/athex_sis/src/Service/SisDbDataService.php	(revision 23dbde305ace6b4725ac802ef375c1bd81323e4d)
+++ b/web/modules/custom/athex_sis/src/Service/SisDbDataService.php	(date 1706710567910)
@@ -33,7 +33,7 @@
 		return $sql;
 	}
 
-	public function fetchAll(
+	/*public function fetchAll(
 		$cmd,
 		$offset = 0,
 		$limit = -1,
@@ -44,5 +44,25 @@
 		$res = [];
 		$rc = oci_fetch_all($cmd, $res, $offset, $limit, $flags);
 		return $res;
+	}*/
+
+	public function fetchAllWithParams($sql, array $params = []) {
+		$connection = $this->getConnection();
+		$stmt = oci_parse($connection, $sql);
+
+		foreach ($params as $param => $value) {
+			oci_bind_by_name($stmt, ltrim($param, ':'), $params[$param]); // Remove leading colon in parameter placeholder
+		}
+
+		oci_execute($stmt);
+
+		$data = [];
+		while ($row = oci_fetch_array($stmt, OCI_ASSOC)) {
+			$data[] = $row;
+		}
+
+		return $data;
 	}
+
+
 }
Index: web/modules/custom/athex_d_mde/src/Controller/TickerTapeController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/web/modules/custom/athex_d_mde/src/Controller/TickerTapeController.php b/web/modules/custom/athex_d_mde/src/Controller/TickerTapeController.php
--- a/web/modules/custom/athex_d_mde/src/Controller/TickerTapeController.php	(revision 23dbde305ace6b4725ac802ef375c1bd81323e4d)
+++ b/web/modules/custom/athex_d_mde/src/Controller/TickerTapeController.php	(date 1706710497344)
@@ -20,7 +20,7 @@
 
 	public static function create(ContainerInterface $container) {
 		return new static(
-			$container->get('athex_d_mde.ticker_tape')
+			$container->get('athex_d_mde.tickertape')
 		);
 	}
 
Index: web/modules/custom/athex_sis/src/Controller/TestController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/web/modules/custom/athex_sis/src/Controller/TestController.php b/web/modules/custom/athex_sis/src/Controller/TestController.php
--- a/web/modules/custom/athex_sis/src/Controller/TestController.php	(revision 23dbde305ace6b4725ac802ef375c1bd81323e4d)
+++ b/web/modules/custom/athex_sis/src/Controller/TestController.php	(date 1706710567894)
@@ -7,43 +7,60 @@
 use Symfony\Component\HttpFoundation\JsonResponse;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
-class TestController extends ControllerBase
-{
+class TestController extends ControllerBase {
 
-	protected $db;
+    protected $db;
 
-	public function __construct(SisDbDataService $db)
-	{
-		$this->db = $db;
-	}
+    public function __construct(SisDbDataService $db) {
+        $this->db = $db;
+    }
 
-	public static function create(ContainerInterface $container)
-	{
-		return new static(
-			$container->get('athex_sis.db_data')
-		);
-	}
+    public static function create(ContainerInterface $container) {
+        return new static(
+            $container->get('athex_sis.db_data')
+        );
+    }
 
-	public function test()
-	{
-		$gdValues = ['GD', 'FTSE', 'ETE', 'ALPHA', 'TPEIR', 'EXAE']; // Array of values to query
-		$resultsByIndex = [];  // Array to store results for each index
+	public function test() {
+		$gdValues = ['GD', 'FTSE', 'ETE', 'ALPHA', 'TPEIR', 'EXAE'];
+		$resultsByIndex = [];
 
 		foreach ($gdValues as $gdValue) {
-			// SQL query for each value in the array
 			$sql = "SELECT hs.TICKER_EN FROM HELEX_STOCKS hs
-                    JOIN HELEX_INDEXCOMPOSITION hic ON hs.STOCK_ID = hic.STOCK_ID
-                    JOIN HELEX_INDICES hi ON hic.INDEX_ID = hi.INDEX_ID
-                    WHERE hi.TICKER_EN = '$gdValue'";
+                JOIN HELEX_INDEXCOMPOSITION hic ON hs.STOCK_ID = hic.STOCK_ID
+                JOIN HELEX_INDICES hi ON hic.INDEX_ID = hi.INDEX_ID
+                WHERE hi.TICKER_EN = :gdValue";
+
+			$resultsByIndex[$gdValue] = $this->db->fetchAllWithParams($sql, [':gdValue' => $gdValue]);
+		}
+
+		// rest of your code
 
-			// Fetch results for the current value
-			$result = $this->db->fetchAll($sql);
 
-			// Store results in associative array under the index symbol
-			$resultsByIndex[$gdValue] = $result;
-		}
+		// Generating table rows from the result
+		$tableRows = [];
+		foreach ($resultsByIndex as $symbol => $data) {
+			$rowData = [$symbol]; // First column will be the symbol itself
+
+			foreach ($data as $dataCell) {
+				$rowData[] = $dataCell["TICKER_EN"]; // Change this according to your data structure
+			}
 
-		// Prepare and return response with results organized by index symbol
-		return new JsonResponse(['data' => $resultsByIndex]);
+			$tableRows[] = $rowData;
+		}
+
+		$table = [
+			'#type' => 'table',
+			'#rows' => $tableRows,
+		];
+
+		return $table; // Instead of a JsonResponse, you return the render array
 	}
-}
+
+    }
+
+
+	// In your Block or Controller
+
+
+
Index: web/modules/custom/athex_d_mde/src/Plugin/Block/IndicesOverviewTablesBlock.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/web/modules/custom/athex_d_mde/src/Plugin/Block/IndicesOverviewTablesBlock.php b/web/modules/custom/athex_d_mde/src/Plugin/Block/IndicesOverviewTablesBlock.php
--- a/web/modules/custom/athex_d_mde/src/Plugin/Block/IndicesOverviewTablesBlock.php	(revision 23dbde305ace6b4725ac802ef375c1bd81323e4d)
+++ b/web/modules/custom/athex_d_mde/src/Plugin/Block/IndicesOverviewTablesBlock.php	(date 1706710497348)
@@ -19,5 +19,8 @@
 	public function build() {
 		$service = \Drupal::service('athex_d_mde.indices_overview_tables');
 		return $service->getBlockRA();
+
 	}
+
+
 }
